{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactPopper = require(\"react-popper\");\n\nvar _utils = require(\"./utils\");\n\nvar _Button = _interopRequireDefault(require(\"./Button\"));\n\nvar propTypes = {\n  caret: _propTypes.default.bool,\n  color: _propTypes.default.string,\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  cssModule: _propTypes.default.object,\n  disabled: _propTypes.default.bool,\n  onClick: _propTypes.default.func,\n  'aria-haspopup': _propTypes.default.bool,\n  split: _propTypes.default.bool,\n  tag: _utils.tagPropType,\n  nav: _propTypes.default.bool\n};\nvar defaultProps = {\n  'aria-haspopup': true,\n  color: 'secondary'\n};\nvar contextTypes = {\n  isOpen: _propTypes.default.bool.isRequired,\n  toggle: _propTypes.default.func.isRequired,\n  inNavbar: _propTypes.default.bool.isRequired\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(DropdownToggle, _React$Component);\n\n  function DropdownToggle(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n\n  var _proto = DropdownToggle.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.nav && !this.props.tag) {\n      e.preventDefault();\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    this.context.toggle(e);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        color = _this$props.color,\n        cssModule = _this$props.cssModule,\n        caret = _this$props.caret,\n        split = _this$props.split,\n        nav = _this$props.nav,\n        tag = _this$props.tag,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"className\", \"color\", \"cssModule\", \"caret\", \"split\", \"nav\", \"tag\"]);\n    var ariaLabel = props['aria-label'] || 'Toggle Dropdown';\n    var classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, {\n      'dropdown-toggle': caret || split,\n      'dropdown-toggle-split': split,\n      'nav-link': nav\n    }), cssModule);\n\n    var children = props.children || _react.default.createElement(\"span\", {\n      className: \"sr-only\"\n    }, ariaLabel);\n\n    var Tag;\n\n    if (nav && !tag) {\n      Tag = 'a';\n      props.href = '#';\n    } else if (!tag) {\n      Tag = _Button.default;\n      props.color = color;\n      props.cssModule = cssModule;\n    } else {\n      Tag = tag;\n    }\n\n    if (this.context.inNavbar) {\n      return _react.default.createElement(Tag, (0, _extends2.default)({}, props, {\n        className: classes,\n        onClick: this.onClick,\n        \"aria-expanded\": this.context.isOpen,\n        children: children\n      }));\n    }\n\n    return _react.default.createElement(_reactPopper.Target, (0, _extends2.default)({}, props, {\n      className: classes,\n      component: Tag,\n      onClick: this.onClick,\n      \"aria-expanded\": this.context.isOpen,\n      children: children\n    }));\n  };\n\n  return DropdownToggle;\n}(_react.default.Component);\n\nDropdownToggle.propTypes = propTypes;\nDropdownToggle.defaultProps = defaultProps;\nDropdownToggle.contextTypes = contextTypes;\nvar _default = DropdownToggle;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}